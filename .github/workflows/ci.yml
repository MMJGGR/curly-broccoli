name: CI

on:
  push:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: finance_app
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Create test database
        env:
          PGPASSWORD: pass
          PGDATABASE: postgres
        run: |
          until pg_isready -h localhost -U user; do sleep 1; done
          psql -h localhost -U user -c "CREATE DATABASE \"user\";"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install API dependencies
        run: |
          cd api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run API tests with coverage
        run: |
          coverage run -m pytest --maxfail=1 --disable-warnings -q
      - name: Enforce API coverage â‰¥ 90 %
        run: |
          coverage report --fail-under=90

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm test -- --coverage --watchAll=false

      - name: Run Playwright e2e tests
        working-directory: frontend
        run: |
          npx playwright install --with-deps
          npx playwright test

      - name: Run contract tests
        run: pytest frontend/tests/contract

      - name: Build Docker images
        run: |
          docker build -t finance-api:pr-${{ github.sha }} -f api/Dockerfile api
          docker build -t finance-frontend:pr-${{ github.sha }} -f frontend/Dockerfile frontend
